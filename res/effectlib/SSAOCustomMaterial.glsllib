/****************************************************************************
**
** Copyright (C) 2014 NVIDIA Corporation.
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef SSAO_CUSTOM_MATERIAL_GLSLLIB
#define SSAO_CUSTOM_MATERIAL_GLSLLIB
#if QT3DS_ENABLE_SSAO || QT3DS_ENABLE_SSDO

#include "viewProperties.glsllib"
#if QT3DS_ENABLE_SSDO
#include "screenSpaceDO.glsllib"

layout (std140) uniform cbAoShadow {
    vec4 ao_properties;
    vec4 ao_properties2;
    vec4 shadow_properties;
    vec4 aoScreenConst;
    vec4 UvToEyeConst;
    };

uniform sampler2D depth_sampler;
#endif
uniform sampler2D ao_sampler;

#endif  // QT3DS_ENABLE_SSAO || QT3DS_ENABLE_SSDO

#if QT3DS_ENABLE_SSAO

float customMaterialAO()
{
#if QT3DS_ENABLE_SSDO
    vec2 smpUV = (gl_FragCoord.xy) * aoScreenConst.zw;
#else
    ivec2 iSize = textureSize(ao_sampler, 0);
    vec2 smpUV = (gl_FragCoord.xy) / vec2(iSize);
#endif
    return texture(ao_sampler, smpUV).x;
}

#else

float customMaterialAO()
{
    return 1.0;
}

#endif

#if QT3DS_ENABLE_SSDO

float customMaterialShadow( vec3 lightDir, vec3 varWorldPos )
{
    return shadowOcclusion( depth_sampler, lightDir, varWorldPos, viewMatrix, viewProjectionMatrix, shadow_properties, camera_properties, aoScreenConst, UvToEyeConst );
}

#else

float customMaterialShadow( vec3 lightDir, vec3 varWorldPos )
{
    return 1.0;
}

#endif

#endif  // #ifndef SSAO_CUSTOM_MATERIAL_GLSLLIB
