#ifndef TESSELLATION_LINEAR_GLSLLIB
#define TESSELLATION_LINEAR_GLSLLIB


#if TESSELLATION_CONTROL_SHADER
layout (vertices = 3) out;

// global setup in main
vec3 ctWorldPos[3];

uniform vec3 eyePosition;
uniform vec2 distanceRange;
uniform float disableCulling;

float isBackFace()
{
    vec3 faceNormal = normalize( cross( ctWorldPos[2] - ctWorldPos[0], ctWorldPos[1] - ctWorldPos[0] ) );

    vec3 ncd = normalize( ctWorldPos[0] - eyePosition );

    return sign( dot(faceNormal, ncd) );
}

float adaptiveCameraFactor( in float minTess, in float maxTess )
{
    float distanceValue0 = distance( eyePosition, ctWorldPos[0] );
    float distanceValue1 = distance( eyePosition, ctWorldPos[1] );
    float distanceValue2 = distance( eyePosition, ctWorldPos[2] );

    float range = distanceRange[1] - distanceRange[0];

    vec3 edgeDistance;
    edgeDistance[0] = ((distanceValue1 + distanceValue2) / 2.0) / range;
    edgeDistance[1] = ((distanceValue2 + distanceValue0) / 2.0) / range;
    edgeDistance[2] = ((distanceValue0 + distanceValue1) / 2.0) / range;

    edgeDistance = clamp( edgeDistance, vec3(0.0), vec3(1.0) );

    //float af = mix( minTess, maxTess,  1.0 - edgeDistance[gl_InvocationID] );
    float af = 1.0 - edgeDistance[gl_InvocationID];
    af = clamp( af*af*maxTess , minTess, maxTess );

    return af;
}

void tessShader ( in float tessEdge, in float tessInner )
{
    float bf = isBackFace();
    bf = max(disableCulling, bf);

    // adapative tessellation factor
    float af = adaptiveCameraFactor( tessInner, tessEdge );

    // Calculate the tessellation levels
    gl_TessLevelInner[0] =  af * bf;
    gl_TessLevelOuter[gl_InvocationID] = af * bf;
}
#endif

#if TESSELLATION_EVALUATION_SHADER
layout (triangles, equal_spacing, ccw) in;

vec4 tessShader ( )
{
    vec4 p0 = gl_TessCoord.x * gl_in[0].gl_Position;
    vec4 p1 = gl_TessCoord.y * gl_in[1].gl_Position;
    vec4 p2 = gl_TessCoord.z * gl_in[2].gl_Position;
    vec4 pos = p0 + p1 + p2;
    return pos;
}
#endif

#endif
